/* src/app_pages/output_page/OutputPage.svelte generated by Svelte v3.31.1 */
import {
	SvelteComponent,
	append,
	attr,
	destroy_block,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_data,
	space,
	text,
	update_keyed_each
} from "../../../web_modules/svelte/internal.js";

import { AppStateStore, AppUserState } from "../../app_state/app-state.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

// (8:0) {#each outputFiles as video (video.id)}
function create_each_block(key_1, ctx) {
	let p;
	let t0_value = /*video*/ ctx[1].fileName + "";
	let t0;
	let t1;
	let a;
	let t2;
	let a_href_value;
	let a_download_value;

	return {
		key: key_1,
		first: null,
		c() {
			p = element("p");
			t0 = text(t0_value);
			t1 = space();
			a = element("a");
			t2 = text("Download");
			attr(a, "href", a_href_value = /*video*/ ctx[1].fileURL);
			attr(a, "download", a_download_value = /*video*/ ctx[1].fileName);
			this.first = p;
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t0);
			insert(target, t1, anchor);
			insert(target, a, anchor);
			append(a, t2);
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*outputFiles*/ 1 && t0_value !== (t0_value = /*video*/ ctx[1].fileName + "")) set_data(t0, t0_value);

			if (dirty & /*outputFiles*/ 1 && a_href_value !== (a_href_value = /*video*/ ctx[1].fileURL)) {
				attr(a, "href", a_href_value);
			}

			if (dirty & /*outputFiles*/ 1 && a_download_value !== (a_download_value = /*video*/ ctx[1].fileName)) {
				attr(a, "download", a_download_value);
			}
		},
		d(detaching) {
			if (detaching) detach(p);
			if (detaching) detach(t1);
			if (detaching) detach(a);
		}
	};
}

function create_fragment(ctx) {
	let h1;
	let t1;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let t2;
	let button;
	let mounted;
	let dispose;
	let each_value = /*outputFiles*/ ctx[0];
	const get_key = ctx => /*video*/ ctx[1].id;

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	return {
		c() {
			h1 = element("h1");
			h1.textContent = "OUTPUT";
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			button = element("button");
			button.textContent = "Back To Start";
		},
		m(target, anchor) {
			insert(target, h1, anchor);
			insert(target, t1, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, t2, anchor);
			insert(target, button, anchor);

			if (!mounted) {
				dispose = listen(button, "click", AppStateStore.resetApplicationState);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*outputFiles*/ 1) {
				each_value = /*outputFiles*/ ctx[0];
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, t2.parentNode, destroy_block, create_each_block, t2, get_each_context);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(h1);
			if (detaching) detach(t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(t2);
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	let { outputFiles } = $$props;

	$$self.$$set = $$props => {
		if ("outputFiles" in $$props) $$invalidate(0, outputFiles = $$props.outputFiles);
	};

	return [outputFiles];
}

class OutputPage extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { outputFiles: 0 });
	}
}

export default OutputPage;