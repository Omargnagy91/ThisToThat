import './App.css.proxy.js';
/* src/App.svelte generated by Svelte v3.31.1 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../web_modules/svelte/internal.js";

import { AppStateStore, AppUserState } from "./app_state/app-state.js";
import UploadPage from "./app_pages/upload_page/UploadPage.js";
import ConfigurationPage from "./app_pages/configuration_page/ConfigurationPage.js";
import ProcessPage from "./app_pages/process_page/ProcessPage.js";
import OutputPage from "./app_pages/output_page/OutputPage.js";

function create_if_block_8(ctx) {
	return {
		c() {
			document.title = "ThisToThat - Output";
		},
		m: noop,
		d: noop
	};
}

// (33:44) 
function create_if_block_7(ctx) {
	return {
		c() {
			document.title = "ThisToThat - Process";
		},
		m: noop,
		d: noop
	};
}

// (31:50) 
function create_if_block_6(ctx) {
	return {
		c() {
			document.title = "ThisToThat - Configuration";
		},
		m: noop,
		d: noop
	};
}

// (29:1) {#if appState == AppUserState.Input}
function create_if_block_5(ctx) {
	return {
		c() {
			document.title = "ThisToThat - Upload";
		},
		m: noop,
		d: noop
	};
}

// (51:1) {:else}
function create_else_block(ctx) {
	let h1;

	return {
		c() {
			h1 = element("h1");
			h1.textContent = "FFMPEG IS LOADING...";
		},
		m(target, anchor) {
			insert(target, h1, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(h1);
		}
	};
}

// (41:1) {#if ffmpegReady}
function create_if_block(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_1, create_if_block_2, create_if_block_3, create_if_block_4];
	const if_blocks = [];

	function select_block_type_2(ctx, dirty) {
		if (/*appState*/ ctx[0] == AppUserState.Input) return 0;
		if (/*appState*/ ctx[0] == AppUserState.Configuration) return 1;
		if (/*appState*/ ctx[0] == AppUserState.Process) return 2;
		if (/*appState*/ ctx[0] == AppUserState.Output) return 3;
		return -1;
	}

	if (~(current_block_type_index = select_block_type_2(ctx, -1))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(target, anchor);
			}

			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_2(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				} else {
					if_block = null;
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d(detaching);
			}

			if (detaching) detach(if_block_anchor);
		}
	};
}

// (48:44) 
function create_if_block_4(ctx) {
	let outputpage;
	let current;

	outputpage = new OutputPage({
			props: { outputFiles: /*outputFiles*/ ctx[5] }
		});

	return {
		c() {
			create_component(outputpage.$$.fragment);
		},
		m(target, anchor) {
			mount_component(outputpage, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const outputpage_changes = {};
			if (dirty & /*outputFiles*/ 32) outputpage_changes.outputFiles = /*outputFiles*/ ctx[5];
			outputpage.$set(outputpage_changes);
		},
		i(local) {
			if (current) return;
			transition_in(outputpage.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(outputpage.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(outputpage, detaching);
		}
	};
}

// (46:45) 
function create_if_block_3(ctx) {
	let processpage;
	let current;

	processpage = new ProcessPage({
			props: {
				uploadedFiles: /*uploadedFiles*/ ctx[3],
				ffmpeg: /*ffmpeg*/ ctx[4],
				outputFormat: /*outputFormat*/ ctx[2]
			}
		});

	return {
		c() {
			create_component(processpage.$$.fragment);
		},
		m(target, anchor) {
			mount_component(processpage, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const processpage_changes = {};
			if (dirty & /*uploadedFiles*/ 8) processpage_changes.uploadedFiles = /*uploadedFiles*/ ctx[3];
			if (dirty & /*ffmpeg*/ 16) processpage_changes.ffmpeg = /*ffmpeg*/ ctx[4];
			if (dirty & /*outputFormat*/ 4) processpage_changes.outputFormat = /*outputFormat*/ ctx[2];
			processpage.$set(processpage_changes);
		},
		i(local) {
			if (current) return;
			transition_in(processpage.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(processpage.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(processpage, detaching);
		}
	};
}

// (44:51) 
function create_if_block_2(ctx) {
	let configurationpage;
	let current;

	configurationpage = new ConfigurationPage({
			props: { outputFormat: /*outputFormat*/ ctx[2] }
		});

	return {
		c() {
			create_component(configurationpage.$$.fragment);
		},
		m(target, anchor) {
			mount_component(configurationpage, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const configurationpage_changes = {};
			if (dirty & /*outputFormat*/ 4) configurationpage_changes.outputFormat = /*outputFormat*/ ctx[2];
			configurationpage.$set(configurationpage_changes);
		},
		i(local) {
			if (current) return;
			transition_in(configurationpage.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(configurationpage.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(configurationpage, detaching);
		}
	};
}

// (42:2) {#if appState == AppUserState.Input}
function create_if_block_1(ctx) {
	let uploadpage;
	let current;

	uploadpage = new UploadPage({
			props: { uploadedFiles: /*uploadedFiles*/ ctx[3] }
		});

	return {
		c() {
			create_component(uploadpage.$$.fragment);
		},
		m(target, anchor) {
			mount_component(uploadpage, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const uploadpage_changes = {};
			if (dirty & /*uploadedFiles*/ 8) uploadpage_changes.uploadedFiles = /*uploadedFiles*/ ctx[3];
			uploadpage.$set(uploadpage_changes);
		},
		i(local) {
			if (current) return;
			transition_in(uploadpage.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(uploadpage.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(uploadpage, detaching);
		}
	};
}

function create_fragment(ctx) {
	let if_block0_anchor;
	let t;
	let div;
	let current_block_type_index;
	let if_block1;
	let current;

	function select_block_type(ctx, dirty) {
		if (/*appState*/ ctx[0] == AppUserState.Input) return create_if_block_5;
		if (/*appState*/ ctx[0] == AppUserState.Configuration) return create_if_block_6;
		if (/*appState*/ ctx[0] == AppUserState.Process) return create_if_block_7;
		if (/*appState*/ ctx[0] == AppUserState.Output) return create_if_block_8;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block0 = current_block_type && current_block_type(ctx);
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*ffmpegReady*/ ctx[1]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx, -1);
	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			if_block0_anchor = empty();
			t = space();
			div = element("div");
			if_block1.c();
			attr(div, "class", "App svelte-xypr26");
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(document.head, null);
			append(document.head, if_block0_anchor);
			insert(target, t, anchor);
			insert(target, div, anchor);
			if_blocks[current_block_type_index].m(div, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (current_block_type !== (current_block_type = select_block_type(ctx, dirty))) {
				if (if_block0) if_block0.d(1);
				if_block0 = current_block_type && current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(if_block0_anchor.parentNode, if_block0_anchor);
				}
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block1 = if_blocks[current_block_type_index];

				if (!if_block1) {
					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block1.c();
				} else {
					if_block1.p(ctx, dirty);
				}

				transition_in(if_block1, 1);
				if_block1.m(div, null);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (if_block0) {
				if_block0.d(detaching);
			}

			detach(if_block0_anchor);
			if (detaching) detach(t);
			if (detaching) detach(div);
			if_blocks[current_block_type_index].d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	
	
	let appState;
	let ffmpegReady;
	let outputFormat;
	let uploadedFiles;
	let ffmpeg;
	let outputFiles;

	const unsubscribe = AppStateStore.subscribe(state => {
		$$invalidate(0, { appState, ffmpegReady, outputFormat, uploadedFiles, ffmpeg, outputFiles } = state, appState, $$invalidate(1, ffmpegReady), $$invalidate(2, outputFormat), $$invalidate(3, uploadedFiles), $$invalidate(4, ffmpeg), $$invalidate(5, outputFiles));
	});

	return [appState, ffmpegReady, outputFormat, uploadedFiles, ffmpeg, outputFiles];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;