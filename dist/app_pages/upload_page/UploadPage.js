import './UploadPage.css.proxy.js';
/* src/app_pages/upload_page/UploadPage.svelte generated by Svelte v3.31.1 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	attr,
	binding_callbacks,
	create_animation,
	create_in_transition,
	detach,
	element,
	empty,
	fix_and_destroy_block,
	fix_position,
	init,
	insert,
	is_function,
	listen,
	noop,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	update_keyed_each
} from "../../../web_modules/svelte/internal.js";

import { AppStateStore } from "../../app_state/app-state.js";
import { onMount } from "../../../web_modules/svelte.js";
import { flip } from "../../../web_modules/svelte/animate.js";
import { scale } from "../../../web_modules/svelte/transition.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[11] = list[i];
	return child_ctx;
}

// (91:0) {#each uploadedFiles as file (file.id)}
function create_each_block(key_1, ctx) {
	let div;
	let p;
	let t0_value = /*file*/ ctx[11].fileName + "";
	let t0;
	let t1;
	let t2_value = /*file*/ ctx[11].fileSize + "";
	let t2;
	let t3;
	let t4;
	let button;
	let div_intro;
	let rect;
	let stop_animation = noop;
	let mounted;
	let dispose;

	return {
		key: key_1,
		first: null,
		c() {
			div = element("div");
			p = element("p");
			t0 = text(t0_value);
			t1 = text(" [");
			t2 = text(t2_value);
			t3 = text("bytes]");
			t4 = space();
			button = element("button");
			button.textContent = "X";
			this.first = div;
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, p);
			append(p, t0);
			append(p, t1);
			append(p, t2);
			append(p, t3);
			append(div, t4);
			append(div, button);

			if (!mounted) {
				dispose = listen(button, "click", function () {
					if (is_function(/*getRemoveFunction*/ ctx[3](/*file*/ ctx[11].id))) /*getRemoveFunction*/ ctx[3](/*file*/ ctx[11].id).apply(this, arguments);
				});

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*uploadedFiles*/ 1 && t0_value !== (t0_value = /*file*/ ctx[11].fileName + "")) set_data(t0, t0_value);
			if (dirty & /*uploadedFiles*/ 1 && t2_value !== (t2_value = /*file*/ ctx[11].fileSize + "")) set_data(t2, t2_value);
		},
		r() {
			rect = div.getBoundingClientRect();
		},
		f() {
			fix_position(div);
			stop_animation();
		},
		a() {
			stop_animation();
			stop_animation = create_animation(div, rect, flip, {});
		},
		i(local) {
			if (!div_intro) {
				add_render_callback(() => {
					div_intro = create_in_transition(div, scale, {});
					div_intro.start();
				});
			}
		},
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

// (97:0) {#if uploadedFiles.length}
function create_if_block(ctx) {
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			button.textContent = "NEXT";
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (!mounted) {
				dispose = listen(button, "click", /*proceedToConfiguration*/ ctx[4]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div;
	let t0;
	let input;
	let t1;
	let span;
	let t2;
	let button;
	let t4;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let t5;
	let if_block_anchor;
	let mounted;
	let dispose;
	let each_value = /*uploadedFiles*/ ctx[0];
	const get_key = ctx => /*file*/ ctx[11].id;

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	let if_block = /*uploadedFiles*/ ctx[0].length && create_if_block(ctx);

	return {
		c() {
			div = element("div");
			t0 = space();
			input = element("input");
			t1 = space();
			span = element("span");
			t2 = text("Or\n  ");
			button = element("button");
			button.textContent = "click here to upload files.";
			t4 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t5 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			attr(div, "id", "drop-area");
			attr(div, "class", "svelte-1shw3uz");
			attr(input, "type", "file");
			attr(input, "id", "file-selector");
			input.multiple = true;
			attr(input, "accept", "video/*");
			attr(input, "class", "svelte-1shw3uz");
			attr(button, "id", "file-button");
			attr(button, "class", "svelte-1shw3uz");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			/*div_binding*/ ctx[5](div);
			insert(target, t0, anchor);
			insert(target, input, anchor);
			/*input_binding*/ ctx[6](input);
			insert(target, t1, anchor);
			insert(target, span, anchor);
			append(span, t2);
			append(span, button);
			insert(target, t4, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, t5, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler*/ ctx[7]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*getRemoveFunction, uploadedFiles*/ 9) {
				each_value = /*uploadedFiles*/ ctx[0];
				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].r();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, t5.parentNode, fix_and_destroy_block, create_each_block, t5, get_each_context);
				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].a();
			}

			if (/*uploadedFiles*/ ctx[0].length) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i(local) {
			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}
		},
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			/*div_binding*/ ctx[5](null);
			if (detaching) detach(t0);
			if (detaching) detach(input);
			/*input_binding*/ ctx[6](null);
			if (detaching) detach(t1);
			if (detaching) detach(span);
			if (detaching) detach(t4);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(t5);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	
	let { uploadedFiles } = $$props;
	let dropArea;
	let fileButton;

	const getRemoveFunction = id => {
		return () => AppStateStore.removeUploadedFile(id);
	};

	const handleDragOver = event => {
		event.stopPropagation();
		event.preventDefault();

		// TODO: add some error handling incase something bad happens.
		if (event.dataTransfer) event.dataTransfer.dropEffect = "copy";
	};

	const handleDrop = event => {
		event.stopPropagation();
		event.preventDefault();

		// TODO: add some error handling incase something bad happens.
		if (event.dataTransfer) {
			AppStateStore.addUploadedFiles([...event.dataTransfer.files]);
		}
	};

	const handleFileButtonChange = event => {
		event.stopPropagation();
		event.preventDefault();

		if (event.target) {
			let fileList = event.target.files;
			if (fileList) AppStateStore.addUploadedFiles([...fileList]);
		}
	};

	onMount(() => {
		dropArea.addEventListener("dragover", handleDragOver);
		dropArea.addEventListener("drop", handleDrop);
		fileButton.addEventListener("change", handleFileButtonChange);
		fileButton.addEventListener("click", () => $$invalidate(2, fileButton.value = null, fileButton));
	});

	const proceedToConfiguration = () => {
		AppStateStore.incrementState();
	};

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			dropArea = $$value;
			$$invalidate(1, dropArea);
		});
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			fileButton = $$value;
			$$invalidate(2, fileButton);
		});
	}

	const click_handler = () => fileButton.click();

	$$self.$$set = $$props => {
		if ("uploadedFiles" in $$props) $$invalidate(0, uploadedFiles = $$props.uploadedFiles);
	};

	return [
		uploadedFiles,
		dropArea,
		fileButton,
		getRemoveFunction,
		proceedToConfiguration,
		div_binding,
		input_binding,
		click_handler
	];
}

class UploadPage extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { uploadedFiles: 0 });
	}
}

export default UploadPage;