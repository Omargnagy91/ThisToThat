/* src/app_pages/configuration_page/ConfigurationPage.svelte generated by Svelte v3.31.1 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	attr,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	select_option,
	select_value,
	space
} from "../../../web_modules/svelte/internal.js";

import { AppStateStore } from "../../app_state/app-state.js";

function create_fragment(ctx) {
	let h1;
	let t1;
	let p;
	let t3;
	let select;
	let option0;
	let option1;
	let t6;
	let button0;
	let t8;
	let button1;
	let mounted;
	let dispose;

	return {
		c() {
			h1 = element("h1");
			h1.textContent = "Configuration";
			t1 = space();
			p = element("p");
			p.textContent = "Choose an output format:";
			t3 = space();
			select = element("select");
			option0 = element("option");
			option0.textContent = ".mp4";
			option1 = element("option");
			option1.textContent = ".mov";
			t6 = space();
			button0 = element("button");
			button0.textContent = "BACK";
			t8 = space();
			button1 = element("button");
			button1.textContent = "NEXT";
			option0.__value = "mp4";
			option0.value = option0.__value;
			option1.__value = "mov";
			option1.value = option1.__value;
			attr(select, "name", "output format");
			if (/*outputFormat*/ ctx[0] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[3].call(select));
		},
		m(target, anchor) {
			insert(target, h1, anchor);
			insert(target, t1, anchor);
			insert(target, p, anchor);
			insert(target, t3, anchor);
			insert(target, select, anchor);
			append(select, option0);
			append(select, option1);
			select_option(select, /*outputFormat*/ ctx[0]);
			insert(target, t6, anchor);
			insert(target, button0, anchor);
			insert(target, t8, anchor);
			insert(target, button1, anchor);

			if (!mounted) {
				dispose = [
					listen(select, "change", /*select_change_handler*/ ctx[3]),
					listen(button0, "click", /*goBackToUpload*/ ctx[2]),
					listen(button1, "click", /*proceedToOutput*/ ctx[1])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*outputFormat*/ 1) {
				select_option(select, /*outputFormat*/ ctx[0]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(h1);
			if (detaching) detach(t1);
			if (detaching) detach(p);
			if (detaching) detach(t3);
			if (detaching) detach(select);
			if (detaching) detach(t6);
			if (detaching) detach(button0);
			if (detaching) detach(t8);
			if (detaching) detach(button1);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { outputFormat } = $$props;

	const proceedToOutput = () => {
		AppStateStore.incrementState();
	};

	const goBackToUpload = () => {
		AppStateStore.decrementState();
	};

	function select_change_handler() {
		outputFormat = select_value(this);
		$$invalidate(0, outputFormat);
	}

	$$self.$$set = $$props => {
		if ("outputFormat" in $$props) $$invalidate(0, outputFormat = $$props.outputFormat);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*outputFormat*/ 1) {
			// Reactive statement that is triggered when the format changes
			$: {
				AppStateStore.setOutputFormat(outputFormat);
			}
		}
	};

	return [outputFormat, proceedToOutput, goBackToUpload, select_change_handler];
}

class ConfigurationPage extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { outputFormat: 0 });
	}
}

export default ConfigurationPage;